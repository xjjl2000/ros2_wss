// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pointcloud2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pointcloud2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pointcloud2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pointcloud2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pointcloud2_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pointcloud2_2eproto;
namespace pointcloud2 {
class pointCloud2_pb;
struct pointCloud2_pbDefaultTypeInternal;
extern pointCloud2_pbDefaultTypeInternal _pointCloud2_pb_default_instance_;
class pointField_pb;
struct pointField_pbDefaultTypeInternal;
extern pointField_pbDefaultTypeInternal _pointField_pb_default_instance_;
class point_pb;
struct point_pbDefaultTypeInternal;
extern point_pbDefaultTypeInternal _point_pb_default_instance_;
}  // namespace pointcloud2
PROTOBUF_NAMESPACE_OPEN
template<> ::pointcloud2::pointCloud2_pb* Arena::CreateMaybeMessage<::pointcloud2::pointCloud2_pb>(Arena*);
template<> ::pointcloud2::pointField_pb* Arena::CreateMaybeMessage<::pointcloud2::pointField_pb>(Arena*);
template<> ::pointcloud2::point_pb* Arena::CreateMaybeMessage<::pointcloud2::point_pb>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pointcloud2 {

// ===================================================================

class pointField_pb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pointcloud2.pointField_pb) */ {
 public:
  inline pointField_pb() : pointField_pb(nullptr) {}
  ~pointField_pb() override;
  explicit PROTOBUF_CONSTEXPR pointField_pb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pointField_pb(const pointField_pb& from);
  pointField_pb(pointField_pb&& from) noexcept
    : pointField_pb() {
    *this = ::std::move(from);
  }

  inline pointField_pb& operator=(const pointField_pb& from) {
    CopyFrom(from);
    return *this;
  }
  inline pointField_pb& operator=(pointField_pb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pointField_pb& default_instance() {
    return *internal_default_instance();
  }
  static inline const pointField_pb* internal_default_instance() {
    return reinterpret_cast<const pointField_pb*>(
               &_pointField_pb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pointField_pb& a, pointField_pb& b) {
    a.Swap(&b);
  }
  inline void Swap(pointField_pb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pointField_pb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pointField_pb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pointField_pb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pointField_pb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const pointField_pb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pointField_pb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pointcloud2.pointField_pb";
  }
  protected:
  explicit pointField_pb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kDatatypeFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 offset = 2;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 datatype = 3;
  void clear_datatype();
  int32_t datatype() const;
  void set_datatype(int32_t value);
  private:
  int32_t _internal_datatype() const;
  void _internal_set_datatype(int32_t value);
  public:

  // int32 count = 4;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pointcloud2.pointField_pb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t offset_;
  int32_t datatype_;
  int32_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pointcloud2_2eproto;
};
// -------------------------------------------------------------------

class point_pb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pointcloud2.point_pb) */ {
 public:
  inline point_pb() : point_pb(nullptr) {}
  ~point_pb() override;
  explicit PROTOBUF_CONSTEXPR point_pb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  point_pb(const point_pb& from);
  point_pb(point_pb&& from) noexcept
    : point_pb() {
    *this = ::std::move(from);
  }

  inline point_pb& operator=(const point_pb& from) {
    CopyFrom(from);
    return *this;
  }
  inline point_pb& operator=(point_pb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const point_pb& default_instance() {
    return *internal_default_instance();
  }
  static inline const point_pb* internal_default_instance() {
    return reinterpret_cast<const point_pb*>(
               &_point_pb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(point_pb& a, point_pb& b) {
    a.Swap(&b);
  }
  inline void Swap(point_pb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(point_pb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  point_pb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<point_pb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const point_pb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const point_pb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(point_pb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pointcloud2.point_pb";
  }
  protected:
  explicit point_pb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kReflectivityFieldNumber = 4,
    kTagFieldNumber = 5,
    kLineFieldNumber = 6,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float reflectivity = 4;
  void clear_reflectivity();
  float reflectivity() const;
  void set_reflectivity(float value);
  private:
  float _internal_reflectivity() const;
  void _internal_set_reflectivity(float value);
  public:

  // uint32 tag = 5;
  void clear_tag();
  uint32_t tag() const;
  void set_tag(uint32_t value);
  private:
  uint32_t _internal_tag() const;
  void _internal_set_tag(uint32_t value);
  public:

  // uint32 line = 6;
  void clear_line();
  uint32_t line() const;
  void set_line(uint32_t value);
  private:
  uint32_t _internal_line() const;
  void _internal_set_line(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pointcloud2.point_pb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float reflectivity_;
  uint32_t tag_;
  uint32_t line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pointcloud2_2eproto;
};
// -------------------------------------------------------------------

class pointCloud2_pb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pointcloud2.pointCloud2_pb) */ {
 public:
  inline pointCloud2_pb() : pointCloud2_pb(nullptr) {}
  ~pointCloud2_pb() override;
  explicit PROTOBUF_CONSTEXPR pointCloud2_pb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pointCloud2_pb(const pointCloud2_pb& from);
  pointCloud2_pb(pointCloud2_pb&& from) noexcept
    : pointCloud2_pb() {
    *this = ::std::move(from);
  }

  inline pointCloud2_pb& operator=(const pointCloud2_pb& from) {
    CopyFrom(from);
    return *this;
  }
  inline pointCloud2_pb& operator=(pointCloud2_pb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pointCloud2_pb& default_instance() {
    return *internal_default_instance();
  }
  static inline const pointCloud2_pb* internal_default_instance() {
    return reinterpret_cast<const pointCloud2_pb*>(
               &_pointCloud2_pb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(pointCloud2_pb& a, pointCloud2_pb& b) {
    a.Swap(&b);
  }
  inline void Swap(pointCloud2_pb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pointCloud2_pb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pointCloud2_pb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pointCloud2_pb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pointCloud2_pb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const pointCloud2_pb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pointCloud2_pb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pointcloud2.pointCloud2_pb";
  }
  protected:
  explicit pointCloud2_pb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 6,
    kPointsFieldNumber = 15,
    kFrameIdFieldNumber = 3,
    kDataFieldNumber = 10,
    kStampSecFieldNumber = 1,
    kStampNanosecFieldNumber = 2,
    kHeightFieldNumber = 4,
    kWidthFieldNumber = 5,
    kPointStepFieldNumber = 8,
    kRowStepFieldNumber = 9,
    kIsBigendianFieldNumber = 7,
    kIsDenseFieldNumber = 11,
    kConvertTimeFieldNumber = 13,
    kSendTimeFieldNumber = 12,
    kSendCountFieldNumber = 14,
  };
  // repeated .pointcloud2.pointField_pb fields = 6;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::pointcloud2::pointField_pb* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud2::pointField_pb >*
      mutable_fields();
  private:
  const ::pointcloud2::pointField_pb& _internal_fields(int index) const;
  ::pointcloud2::pointField_pb* _internal_add_fields();
  public:
  const ::pointcloud2::pointField_pb& fields(int index) const;
  ::pointcloud2::pointField_pb* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud2::pointField_pb >&
      fields() const;

  // repeated .pointcloud2.point_pb points = 15;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::pointcloud2::point_pb* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud2::point_pb >*
      mutable_points();
  private:
  const ::pointcloud2::point_pb& _internal_points(int index) const;
  ::pointcloud2::point_pb* _internal_add_points();
  public:
  const ::pointcloud2::point_pb& points(int index) const;
  ::pointcloud2::point_pb* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud2::point_pb >&
      points() const;

  // string frame_id = 3;
  void clear_frame_id();
  const std::string& frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // bytes data = 10;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 stamp_sec = 1;
  void clear_stamp_sec();
  int32_t stamp_sec() const;
  void set_stamp_sec(int32_t value);
  private:
  int32_t _internal_stamp_sec() const;
  void _internal_set_stamp_sec(int32_t value);
  public:

  // int32 stamp_nanosec = 2;
  void clear_stamp_nanosec();
  int32_t stamp_nanosec() const;
  void set_stamp_nanosec(int32_t value);
  private:
  int32_t _internal_stamp_nanosec() const;
  void _internal_set_stamp_nanosec(int32_t value);
  public:

  // uint32 height = 4;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // uint32 width = 5;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 point_step = 8;
  void clear_point_step();
  uint32_t point_step() const;
  void set_point_step(uint32_t value);
  private:
  uint32_t _internal_point_step() const;
  void _internal_set_point_step(uint32_t value);
  public:

  // uint32 row_step = 9;
  void clear_row_step();
  uint32_t row_step() const;
  void set_row_step(uint32_t value);
  private:
  uint32_t _internal_row_step() const;
  void _internal_set_row_step(uint32_t value);
  public:

  // bool is_bigendian = 7;
  void clear_is_bigendian();
  bool is_bigendian() const;
  void set_is_bigendian(bool value);
  private:
  bool _internal_is_bigendian() const;
  void _internal_set_is_bigendian(bool value);
  public:

  // bool is_dense = 11;
  void clear_is_dense();
  bool is_dense() const;
  void set_is_dense(bool value);
  private:
  bool _internal_is_dense() const;
  void _internal_set_is_dense(bool value);
  public:

  // float convert_time = 13;
  void clear_convert_time();
  float convert_time() const;
  void set_convert_time(float value);
  private:
  float _internal_convert_time() const;
  void _internal_set_convert_time(float value);
  public:

  // uint64 send_time = 12;
  void clear_send_time();
  uint64_t send_time() const;
  void set_send_time(uint64_t value);
  private:
  uint64_t _internal_send_time() const;
  void _internal_set_send_time(uint64_t value);
  public:

  // uint32 send_count = 14;
  void clear_send_count();
  uint32_t send_count() const;
  void set_send_count(uint32_t value);
  private:
  uint32_t _internal_send_count() const;
  void _internal_set_send_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pointcloud2.pointCloud2_pb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud2::pointField_pb > fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud2::point_pb > points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t stamp_sec_;
  int32_t stamp_nanosec_;
  uint32_t height_;
  uint32_t width_;
  uint32_t point_step_;
  uint32_t row_step_;
  bool is_bigendian_;
  bool is_dense_;
  float convert_time_;
  uint64_t send_time_;
  uint32_t send_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pointcloud2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pointField_pb

// string name = 1;
inline void pointField_pb::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& pointField_pb::name() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointField_pb.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pointField_pb::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pointcloud2.pointField_pb.name)
}
inline std::string* pointField_pb::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pointcloud2.pointField_pb.name)
  return _s;
}
inline const std::string& pointField_pb::_internal_name() const {
  return name_.Get();
}
inline void pointField_pb::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* pointField_pb::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* pointField_pb::release_name() {
  // @@protoc_insertion_point(field_release:pointcloud2.pointField_pb.name)
  return name_.Release();
}
inline void pointField_pb::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pointcloud2.pointField_pb.name)
}

// int32 offset = 2;
inline void pointField_pb::clear_offset() {
  offset_ = 0;
}
inline int32_t pointField_pb::_internal_offset() const {
  return offset_;
}
inline int32_t pointField_pb::offset() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointField_pb.offset)
  return _internal_offset();
}
inline void pointField_pb::_internal_set_offset(int32_t value) {
  
  offset_ = value;
}
inline void pointField_pb::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointField_pb.offset)
}

// int32 datatype = 3;
inline void pointField_pb::clear_datatype() {
  datatype_ = 0;
}
inline int32_t pointField_pb::_internal_datatype() const {
  return datatype_;
}
inline int32_t pointField_pb::datatype() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointField_pb.datatype)
  return _internal_datatype();
}
inline void pointField_pb::_internal_set_datatype(int32_t value) {
  
  datatype_ = value;
}
inline void pointField_pb::set_datatype(int32_t value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointField_pb.datatype)
}

// int32 count = 4;
inline void pointField_pb::clear_count() {
  count_ = 0;
}
inline int32_t pointField_pb::_internal_count() const {
  return count_;
}
inline int32_t pointField_pb::count() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointField_pb.count)
  return _internal_count();
}
inline void pointField_pb::_internal_set_count(int32_t value) {
  
  count_ = value;
}
inline void pointField_pb::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointField_pb.count)
}

// -------------------------------------------------------------------

// point_pb

// float x = 1;
inline void point_pb::clear_x() {
  x_ = 0;
}
inline float point_pb::_internal_x() const {
  return x_;
}
inline float point_pb::x() const {
  // @@protoc_insertion_point(field_get:pointcloud2.point_pb.x)
  return _internal_x();
}
inline void point_pb::_internal_set_x(float value) {
  
  x_ = value;
}
inline void point_pb::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:pointcloud2.point_pb.x)
}

// float y = 2;
inline void point_pb::clear_y() {
  y_ = 0;
}
inline float point_pb::_internal_y() const {
  return y_;
}
inline float point_pb::y() const {
  // @@protoc_insertion_point(field_get:pointcloud2.point_pb.y)
  return _internal_y();
}
inline void point_pb::_internal_set_y(float value) {
  
  y_ = value;
}
inline void point_pb::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:pointcloud2.point_pb.y)
}

// float z = 3;
inline void point_pb::clear_z() {
  z_ = 0;
}
inline float point_pb::_internal_z() const {
  return z_;
}
inline float point_pb::z() const {
  // @@protoc_insertion_point(field_get:pointcloud2.point_pb.z)
  return _internal_z();
}
inline void point_pb::_internal_set_z(float value) {
  
  z_ = value;
}
inline void point_pb::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:pointcloud2.point_pb.z)
}

// float reflectivity = 4;
inline void point_pb::clear_reflectivity() {
  reflectivity_ = 0;
}
inline float point_pb::_internal_reflectivity() const {
  return reflectivity_;
}
inline float point_pb::reflectivity() const {
  // @@protoc_insertion_point(field_get:pointcloud2.point_pb.reflectivity)
  return _internal_reflectivity();
}
inline void point_pb::_internal_set_reflectivity(float value) {
  
  reflectivity_ = value;
}
inline void point_pb::set_reflectivity(float value) {
  _internal_set_reflectivity(value);
  // @@protoc_insertion_point(field_set:pointcloud2.point_pb.reflectivity)
}

// uint32 tag = 5;
inline void point_pb::clear_tag() {
  tag_ = 0u;
}
inline uint32_t point_pb::_internal_tag() const {
  return tag_;
}
inline uint32_t point_pb::tag() const {
  // @@protoc_insertion_point(field_get:pointcloud2.point_pb.tag)
  return _internal_tag();
}
inline void point_pb::_internal_set_tag(uint32_t value) {
  
  tag_ = value;
}
inline void point_pb::set_tag(uint32_t value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:pointcloud2.point_pb.tag)
}

// uint32 line = 6;
inline void point_pb::clear_line() {
  line_ = 0u;
}
inline uint32_t point_pb::_internal_line() const {
  return line_;
}
inline uint32_t point_pb::line() const {
  // @@protoc_insertion_point(field_get:pointcloud2.point_pb.line)
  return _internal_line();
}
inline void point_pb::_internal_set_line(uint32_t value) {
  
  line_ = value;
}
inline void point_pb::set_line(uint32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:pointcloud2.point_pb.line)
}

// -------------------------------------------------------------------

// pointCloud2_pb

// int32 stamp_sec = 1;
inline void pointCloud2_pb::clear_stamp_sec() {
  stamp_sec_ = 0;
}
inline int32_t pointCloud2_pb::_internal_stamp_sec() const {
  return stamp_sec_;
}
inline int32_t pointCloud2_pb::stamp_sec() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.stamp_sec)
  return _internal_stamp_sec();
}
inline void pointCloud2_pb::_internal_set_stamp_sec(int32_t value) {
  
  stamp_sec_ = value;
}
inline void pointCloud2_pb::set_stamp_sec(int32_t value) {
  _internal_set_stamp_sec(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.stamp_sec)
}

// int32 stamp_nanosec = 2;
inline void pointCloud2_pb::clear_stamp_nanosec() {
  stamp_nanosec_ = 0;
}
inline int32_t pointCloud2_pb::_internal_stamp_nanosec() const {
  return stamp_nanosec_;
}
inline int32_t pointCloud2_pb::stamp_nanosec() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.stamp_nanosec)
  return _internal_stamp_nanosec();
}
inline void pointCloud2_pb::_internal_set_stamp_nanosec(int32_t value) {
  
  stamp_nanosec_ = value;
}
inline void pointCloud2_pb::set_stamp_nanosec(int32_t value) {
  _internal_set_stamp_nanosec(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.stamp_nanosec)
}

// string frame_id = 3;
inline void pointCloud2_pb::clear_frame_id() {
  frame_id_.ClearToEmpty();
}
inline const std::string& pointCloud2_pb::frame_id() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.frame_id)
  return _internal_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pointCloud2_pb::set_frame_id(ArgT0&& arg0, ArgT... args) {
 
 frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.frame_id)
}
inline std::string* pointCloud2_pb::mutable_frame_id() {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:pointcloud2.pointCloud2_pb.frame_id)
  return _s;
}
inline const std::string& pointCloud2_pb::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void pointCloud2_pb::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* pointCloud2_pb::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* pointCloud2_pb::release_frame_id() {
  // @@protoc_insertion_point(field_release:pointcloud2.pointCloud2_pb.frame_id)
  return frame_id_.Release();
}
inline void pointCloud2_pb::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_id_.IsDefault()) {
    frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pointcloud2.pointCloud2_pb.frame_id)
}

// uint32 height = 4;
inline void pointCloud2_pb::clear_height() {
  height_ = 0u;
}
inline uint32_t pointCloud2_pb::_internal_height() const {
  return height_;
}
inline uint32_t pointCloud2_pb::height() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.height)
  return _internal_height();
}
inline void pointCloud2_pb::_internal_set_height(uint32_t value) {
  
  height_ = value;
}
inline void pointCloud2_pb::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.height)
}

// uint32 width = 5;
inline void pointCloud2_pb::clear_width() {
  width_ = 0u;
}
inline uint32_t pointCloud2_pb::_internal_width() const {
  return width_;
}
inline uint32_t pointCloud2_pb::width() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.width)
  return _internal_width();
}
inline void pointCloud2_pb::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void pointCloud2_pb::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.width)
}

// repeated .pointcloud2.pointField_pb fields = 6;
inline int pointCloud2_pb::_internal_fields_size() const {
  return fields_.size();
}
inline int pointCloud2_pb::fields_size() const {
  return _internal_fields_size();
}
inline void pointCloud2_pb::clear_fields() {
  fields_.Clear();
}
inline ::pointcloud2::pointField_pb* pointCloud2_pb::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:pointcloud2.pointCloud2_pb.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud2::pointField_pb >*
pointCloud2_pb::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:pointcloud2.pointCloud2_pb.fields)
  return &fields_;
}
inline const ::pointcloud2::pointField_pb& pointCloud2_pb::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::pointcloud2::pointField_pb& pointCloud2_pb::fields(int index) const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.fields)
  return _internal_fields(index);
}
inline ::pointcloud2::pointField_pb* pointCloud2_pb::_internal_add_fields() {
  return fields_.Add();
}
inline ::pointcloud2::pointField_pb* pointCloud2_pb::add_fields() {
  ::pointcloud2::pointField_pb* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:pointcloud2.pointCloud2_pb.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud2::pointField_pb >&
pointCloud2_pb::fields() const {
  // @@protoc_insertion_point(field_list:pointcloud2.pointCloud2_pb.fields)
  return fields_;
}

// bool is_bigendian = 7;
inline void pointCloud2_pb::clear_is_bigendian() {
  is_bigendian_ = false;
}
inline bool pointCloud2_pb::_internal_is_bigendian() const {
  return is_bigendian_;
}
inline bool pointCloud2_pb::is_bigendian() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.is_bigendian)
  return _internal_is_bigendian();
}
inline void pointCloud2_pb::_internal_set_is_bigendian(bool value) {
  
  is_bigendian_ = value;
}
inline void pointCloud2_pb::set_is_bigendian(bool value) {
  _internal_set_is_bigendian(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.is_bigendian)
}

// uint32 point_step = 8;
inline void pointCloud2_pb::clear_point_step() {
  point_step_ = 0u;
}
inline uint32_t pointCloud2_pb::_internal_point_step() const {
  return point_step_;
}
inline uint32_t pointCloud2_pb::point_step() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.point_step)
  return _internal_point_step();
}
inline void pointCloud2_pb::_internal_set_point_step(uint32_t value) {
  
  point_step_ = value;
}
inline void pointCloud2_pb::set_point_step(uint32_t value) {
  _internal_set_point_step(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.point_step)
}

// uint32 row_step = 9;
inline void pointCloud2_pb::clear_row_step() {
  row_step_ = 0u;
}
inline uint32_t pointCloud2_pb::_internal_row_step() const {
  return row_step_;
}
inline uint32_t pointCloud2_pb::row_step() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.row_step)
  return _internal_row_step();
}
inline void pointCloud2_pb::_internal_set_row_step(uint32_t value) {
  
  row_step_ = value;
}
inline void pointCloud2_pb::set_row_step(uint32_t value) {
  _internal_set_row_step(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.row_step)
}

// bytes data = 10;
inline void pointCloud2_pb::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& pointCloud2_pb::data() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pointCloud2_pb::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.data)
}
inline std::string* pointCloud2_pb::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:pointcloud2.pointCloud2_pb.data)
  return _s;
}
inline const std::string& pointCloud2_pb::_internal_data() const {
  return data_.Get();
}
inline void pointCloud2_pb::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* pointCloud2_pb::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* pointCloud2_pb::release_data() {
  // @@protoc_insertion_point(field_release:pointcloud2.pointCloud2_pb.data)
  return data_.Release();
}
inline void pointCloud2_pb::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pointcloud2.pointCloud2_pb.data)
}

// bool is_dense = 11;
inline void pointCloud2_pb::clear_is_dense() {
  is_dense_ = false;
}
inline bool pointCloud2_pb::_internal_is_dense() const {
  return is_dense_;
}
inline bool pointCloud2_pb::is_dense() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.is_dense)
  return _internal_is_dense();
}
inline void pointCloud2_pb::_internal_set_is_dense(bool value) {
  
  is_dense_ = value;
}
inline void pointCloud2_pb::set_is_dense(bool value) {
  _internal_set_is_dense(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.is_dense)
}

// uint64 send_time = 12;
inline void pointCloud2_pb::clear_send_time() {
  send_time_ = uint64_t{0u};
}
inline uint64_t pointCloud2_pb::_internal_send_time() const {
  return send_time_;
}
inline uint64_t pointCloud2_pb::send_time() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.send_time)
  return _internal_send_time();
}
inline void pointCloud2_pb::_internal_set_send_time(uint64_t value) {
  
  send_time_ = value;
}
inline void pointCloud2_pb::set_send_time(uint64_t value) {
  _internal_set_send_time(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.send_time)
}

// float convert_time = 13;
inline void pointCloud2_pb::clear_convert_time() {
  convert_time_ = 0;
}
inline float pointCloud2_pb::_internal_convert_time() const {
  return convert_time_;
}
inline float pointCloud2_pb::convert_time() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.convert_time)
  return _internal_convert_time();
}
inline void pointCloud2_pb::_internal_set_convert_time(float value) {
  
  convert_time_ = value;
}
inline void pointCloud2_pb::set_convert_time(float value) {
  _internal_set_convert_time(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.convert_time)
}

// uint32 send_count = 14;
inline void pointCloud2_pb::clear_send_count() {
  send_count_ = 0u;
}
inline uint32_t pointCloud2_pb::_internal_send_count() const {
  return send_count_;
}
inline uint32_t pointCloud2_pb::send_count() const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.send_count)
  return _internal_send_count();
}
inline void pointCloud2_pb::_internal_set_send_count(uint32_t value) {
  
  send_count_ = value;
}
inline void pointCloud2_pb::set_send_count(uint32_t value) {
  _internal_set_send_count(value);
  // @@protoc_insertion_point(field_set:pointcloud2.pointCloud2_pb.send_count)
}

// repeated .pointcloud2.point_pb points = 15;
inline int pointCloud2_pb::_internal_points_size() const {
  return points_.size();
}
inline int pointCloud2_pb::points_size() const {
  return _internal_points_size();
}
inline void pointCloud2_pb::clear_points() {
  points_.Clear();
}
inline ::pointcloud2::point_pb* pointCloud2_pb::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:pointcloud2.pointCloud2_pb.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud2::point_pb >*
pointCloud2_pb::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:pointcloud2.pointCloud2_pb.points)
  return &points_;
}
inline const ::pointcloud2::point_pb& pointCloud2_pb::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::pointcloud2::point_pb& pointCloud2_pb::points(int index) const {
  // @@protoc_insertion_point(field_get:pointcloud2.pointCloud2_pb.points)
  return _internal_points(index);
}
inline ::pointcloud2::point_pb* pointCloud2_pb::_internal_add_points() {
  return points_.Add();
}
inline ::pointcloud2::point_pb* pointCloud2_pb::add_points() {
  ::pointcloud2::point_pb* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:pointcloud2.pointCloud2_pb.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud2::point_pb >&
pointCloud2_pb::points() const {
  // @@protoc_insertion_point(field_list:pointcloud2.pointCloud2_pb.points)
  return points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pointcloud2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pointcloud2_2eproto

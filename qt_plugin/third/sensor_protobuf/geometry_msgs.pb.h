// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_geometry_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_geometry_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geometry_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_geometry_5fmsgs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geometry_5fmsgs_2eproto;
namespace geometry_msgs {
class Twist;
struct TwistDefaultTypeInternal;
extern TwistDefaultTypeInternal _Twist_default_instance_;
}  // namespace geometry_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::geometry_msgs::Twist* Arena::CreateMaybeMessage<::geometry_msgs::Twist>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace geometry_msgs {

// ===================================================================

class Twist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:geometry_msgs.Twist) */ {
 public:
  inline Twist() : Twist(nullptr) {}
  ~Twist() override;
  explicit PROTOBUF_CONSTEXPR Twist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Twist(const Twist& from);
  Twist(Twist&& from) noexcept
    : Twist() {
    *this = ::std::move(from);
  }

  inline Twist& operator=(const Twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Twist& operator=(Twist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Twist& default_instance() {
    return *internal_default_instance();
  }
  static inline const Twist* internal_default_instance() {
    return reinterpret_cast<const Twist*>(
               &_Twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Twist& a, Twist& b) {
    a.Swap(&b);
  }
  inline void Swap(Twist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Twist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Twist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Twist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Twist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Twist& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Twist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "geometry_msgs.Twist";
  }
  protected:
  explicit Twist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearXFieldNumber = 1,
    kLinearYFieldNumber = 2,
    kLinearZFieldNumber = 3,
    kAngularXFieldNumber = 4,
    kAngularYFieldNumber = 5,
    kAngularZFieldNumber = 6,
  };
  // double linear_x = 1;
  void clear_linear_x();
  double linear_x() const;
  void set_linear_x(double value);
  private:
  double _internal_linear_x() const;
  void _internal_set_linear_x(double value);
  public:

  // double linear_y = 2;
  void clear_linear_y();
  double linear_y() const;
  void set_linear_y(double value);
  private:
  double _internal_linear_y() const;
  void _internal_set_linear_y(double value);
  public:

  // double linear_z = 3;
  void clear_linear_z();
  double linear_z() const;
  void set_linear_z(double value);
  private:
  double _internal_linear_z() const;
  void _internal_set_linear_z(double value);
  public:

  // double angular_x = 4;
  void clear_angular_x();
  double angular_x() const;
  void set_angular_x(double value);
  private:
  double _internal_angular_x() const;
  void _internal_set_angular_x(double value);
  public:

  // double angular_y = 5;
  void clear_angular_y();
  double angular_y() const;
  void set_angular_y(double value);
  private:
  double _internal_angular_y() const;
  void _internal_set_angular_y(double value);
  public:

  // double angular_z = 6;
  void clear_angular_z();
  double angular_z() const;
  void set_angular_z(double value);
  private:
  double _internal_angular_z() const;
  void _internal_set_angular_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:geometry_msgs.Twist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double linear_x_;
  double linear_y_;
  double linear_z_;
  double angular_x_;
  double angular_y_;
  double angular_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Twist

// double linear_x = 1;
inline void Twist::clear_linear_x() {
  linear_x_ = 0;
}
inline double Twist::_internal_linear_x() const {
  return linear_x_;
}
inline double Twist::linear_x() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Twist.linear_x)
  return _internal_linear_x();
}
inline void Twist::_internal_set_linear_x(double value) {
  
  linear_x_ = value;
}
inline void Twist::set_linear_x(double value) {
  _internal_set_linear_x(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Twist.linear_x)
}

// double linear_y = 2;
inline void Twist::clear_linear_y() {
  linear_y_ = 0;
}
inline double Twist::_internal_linear_y() const {
  return linear_y_;
}
inline double Twist::linear_y() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Twist.linear_y)
  return _internal_linear_y();
}
inline void Twist::_internal_set_linear_y(double value) {
  
  linear_y_ = value;
}
inline void Twist::set_linear_y(double value) {
  _internal_set_linear_y(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Twist.linear_y)
}

// double linear_z = 3;
inline void Twist::clear_linear_z() {
  linear_z_ = 0;
}
inline double Twist::_internal_linear_z() const {
  return linear_z_;
}
inline double Twist::linear_z() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Twist.linear_z)
  return _internal_linear_z();
}
inline void Twist::_internal_set_linear_z(double value) {
  
  linear_z_ = value;
}
inline void Twist::set_linear_z(double value) {
  _internal_set_linear_z(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Twist.linear_z)
}

// double angular_x = 4;
inline void Twist::clear_angular_x() {
  angular_x_ = 0;
}
inline double Twist::_internal_angular_x() const {
  return angular_x_;
}
inline double Twist::angular_x() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Twist.angular_x)
  return _internal_angular_x();
}
inline void Twist::_internal_set_angular_x(double value) {
  
  angular_x_ = value;
}
inline void Twist::set_angular_x(double value) {
  _internal_set_angular_x(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Twist.angular_x)
}

// double angular_y = 5;
inline void Twist::clear_angular_y() {
  angular_y_ = 0;
}
inline double Twist::_internal_angular_y() const {
  return angular_y_;
}
inline double Twist::angular_y() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Twist.angular_y)
  return _internal_angular_y();
}
inline void Twist::_internal_set_angular_y(double value) {
  
  angular_y_ = value;
}
inline void Twist::set_angular_y(double value) {
  _internal_set_angular_y(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Twist.angular_y)
}

// double angular_z = 6;
inline void Twist::clear_angular_z() {
  angular_z_ = 0;
}
inline double Twist::_internal_angular_z() const {
  return angular_z_;
}
inline double Twist::angular_z() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Twist.angular_z)
  return _internal_angular_z();
}
inline void Twist::_internal_set_angular_z(double value) {
  
  angular_z_ = value;
}
inline void Twist::set_angular_z(double value) {
  _internal_set_angular_z(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Twist.angular_z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace geometry_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_geometry_5fmsgs_2eproto

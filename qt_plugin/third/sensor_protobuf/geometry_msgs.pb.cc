// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry_msgs.proto

#include "geometry_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace geometry_msgs {
PROTOBUF_CONSTEXPR Twist::Twist(
    ::_pbi::ConstantInitialized)
  : linear_x_(0)
  , linear_y_(0)
  , linear_z_(0)
  , angular_x_(0)
  , angular_y_(0)
  , angular_z_(0){}
struct TwistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwistDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwistDefaultTypeInternal() {}
  union {
    Twist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwistDefaultTypeInternal _Twist_default_instance_;
}  // namespace geometry_msgs
static ::_pb::Metadata file_level_metadata_geometry_5fmsgs_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_geometry_5fmsgs_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_geometry_5fmsgs_2eproto = nullptr;

const uint32_t TableStruct_geometry_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::geometry_msgs::Twist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::geometry_msgs::Twist, linear_x_),
  PROTOBUF_FIELD_OFFSET(::geometry_msgs::Twist, linear_y_),
  PROTOBUF_FIELD_OFFSET(::geometry_msgs::Twist, linear_z_),
  PROTOBUF_FIELD_OFFSET(::geometry_msgs::Twist, angular_x_),
  PROTOBUF_FIELD_OFFSET(::geometry_msgs::Twist, angular_y_),
  PROTOBUF_FIELD_OFFSET(::geometry_msgs::Twist, angular_z_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::geometry_msgs::Twist)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::geometry_msgs::_Twist_default_instance_._instance,
};

const char descriptor_table_protodef_geometry_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023geometry_msgs.proto\022\rgeometry_msgs\"v\n\005"
  "Twist\022\020\n\010linear_x\030\001 \001(\001\022\020\n\010linear_y\030\002 \001("
  "\001\022\020\n\010linear_z\030\003 \001(\001\022\021\n\tangular_x\030\004 \001(\001\022\021"
  "\n\tangular_y\030\005 \001(\001\022\021\n\tangular_z\030\006 \001(\001b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_geometry_5fmsgs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_geometry_5fmsgs_2eproto = {
    false, false, 164, descriptor_table_protodef_geometry_5fmsgs_2eproto,
    "geometry_msgs.proto",
    &descriptor_table_geometry_5fmsgs_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_geometry_5fmsgs_2eproto::offsets,
    file_level_metadata_geometry_5fmsgs_2eproto, file_level_enum_descriptors_geometry_5fmsgs_2eproto,
    file_level_service_descriptors_geometry_5fmsgs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_geometry_5fmsgs_2eproto_getter() {
  return &descriptor_table_geometry_5fmsgs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_geometry_5fmsgs_2eproto(&descriptor_table_geometry_5fmsgs_2eproto);
namespace geometry_msgs {

// ===================================================================

class Twist::_Internal {
 public:
};

Twist::Twist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:geometry_msgs.Twist)
}
Twist::Twist(const Twist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&linear_x_, &from.linear_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_z_) -
    reinterpret_cast<char*>(&linear_x_)) + sizeof(angular_z_));
  // @@protoc_insertion_point(copy_constructor:geometry_msgs.Twist)
}

inline void Twist::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&linear_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angular_z_) -
    reinterpret_cast<char*>(&linear_x_)) + sizeof(angular_z_));
}

Twist::~Twist() {
  // @@protoc_insertion_point(destructor:geometry_msgs.Twist)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Twist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Twist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Twist::Clear() {
// @@protoc_insertion_point(message_clear_start:geometry_msgs.Twist)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&linear_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_z_) -
      reinterpret_cast<char*>(&linear_x_)) + sizeof(angular_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Twist::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double linear_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          linear_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double linear_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          linear_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double linear_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          linear_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double angular_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          angular_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double angular_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          angular_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double angular_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          angular_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Twist::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:geometry_msgs.Twist)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double linear_x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_linear_x = this->_internal_linear_x();
  uint64_t raw_linear_x;
  memcpy(&raw_linear_x, &tmp_linear_x, sizeof(tmp_linear_x));
  if (raw_linear_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_linear_x(), target);
  }

  // double linear_y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_linear_y = this->_internal_linear_y();
  uint64_t raw_linear_y;
  memcpy(&raw_linear_y, &tmp_linear_y, sizeof(tmp_linear_y));
  if (raw_linear_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_linear_y(), target);
  }

  // double linear_z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_linear_z = this->_internal_linear_z();
  uint64_t raw_linear_z;
  memcpy(&raw_linear_z, &tmp_linear_z, sizeof(tmp_linear_z));
  if (raw_linear_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_linear_z(), target);
  }

  // double angular_x = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_x = this->_internal_angular_x();
  uint64_t raw_angular_x;
  memcpy(&raw_angular_x, &tmp_angular_x, sizeof(tmp_angular_x));
  if (raw_angular_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_angular_x(), target);
  }

  // double angular_y = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_y = this->_internal_angular_y();
  uint64_t raw_angular_y;
  memcpy(&raw_angular_y, &tmp_angular_y, sizeof(tmp_angular_y));
  if (raw_angular_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_angular_y(), target);
  }

  // double angular_z = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_z = this->_internal_angular_z();
  uint64_t raw_angular_z;
  memcpy(&raw_angular_z, &tmp_angular_z, sizeof(tmp_angular_z));
  if (raw_angular_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_angular_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geometry_msgs.Twist)
  return target;
}

size_t Twist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geometry_msgs.Twist)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double linear_x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_linear_x = this->_internal_linear_x();
  uint64_t raw_linear_x;
  memcpy(&raw_linear_x, &tmp_linear_x, sizeof(tmp_linear_x));
  if (raw_linear_x != 0) {
    total_size += 1 + 8;
  }

  // double linear_y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_linear_y = this->_internal_linear_y();
  uint64_t raw_linear_y;
  memcpy(&raw_linear_y, &tmp_linear_y, sizeof(tmp_linear_y));
  if (raw_linear_y != 0) {
    total_size += 1 + 8;
  }

  // double linear_z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_linear_z = this->_internal_linear_z();
  uint64_t raw_linear_z;
  memcpy(&raw_linear_z, &tmp_linear_z, sizeof(tmp_linear_z));
  if (raw_linear_z != 0) {
    total_size += 1 + 8;
  }

  // double angular_x = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_x = this->_internal_angular_x();
  uint64_t raw_angular_x;
  memcpy(&raw_angular_x, &tmp_angular_x, sizeof(tmp_angular_x));
  if (raw_angular_x != 0) {
    total_size += 1 + 8;
  }

  // double angular_y = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_y = this->_internal_angular_y();
  uint64_t raw_angular_y;
  memcpy(&raw_angular_y, &tmp_angular_y, sizeof(tmp_angular_y));
  if (raw_angular_y != 0) {
    total_size += 1 + 8;
  }

  // double angular_z = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_z = this->_internal_angular_z();
  uint64_t raw_angular_z;
  memcpy(&raw_angular_z, &tmp_angular_z, sizeof(tmp_angular_z));
  if (raw_angular_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Twist::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Twist::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Twist::GetClassData() const { return &_class_data_; }

void Twist::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Twist *>(to)->MergeFrom(
      static_cast<const Twist &>(from));
}


void Twist::MergeFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geometry_msgs.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_linear_x = from._internal_linear_x();
  uint64_t raw_linear_x;
  memcpy(&raw_linear_x, &tmp_linear_x, sizeof(tmp_linear_x));
  if (raw_linear_x != 0) {
    _internal_set_linear_x(from._internal_linear_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_linear_y = from._internal_linear_y();
  uint64_t raw_linear_y;
  memcpy(&raw_linear_y, &tmp_linear_y, sizeof(tmp_linear_y));
  if (raw_linear_y != 0) {
    _internal_set_linear_y(from._internal_linear_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_linear_z = from._internal_linear_z();
  uint64_t raw_linear_z;
  memcpy(&raw_linear_z, &tmp_linear_z, sizeof(tmp_linear_z));
  if (raw_linear_z != 0) {
    _internal_set_linear_z(from._internal_linear_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_x = from._internal_angular_x();
  uint64_t raw_angular_x;
  memcpy(&raw_angular_x, &tmp_angular_x, sizeof(tmp_angular_x));
  if (raw_angular_x != 0) {
    _internal_set_angular_x(from._internal_angular_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_y = from._internal_angular_y();
  uint64_t raw_angular_y;
  memcpy(&raw_angular_y, &tmp_angular_y, sizeof(tmp_angular_y));
  if (raw_angular_y != 0) {
    _internal_set_angular_y(from._internal_angular_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_z = from._internal_angular_z();
  uint64_t raw_angular_z;
  memcpy(&raw_angular_z, &tmp_angular_z, sizeof(tmp_angular_z));
  if (raw_angular_z != 0) {
    _internal_set_angular_z(from._internal_angular_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Twist::CopyFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geometry_msgs.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twist::IsInitialized() const {
  return true;
}

void Twist::InternalSwap(Twist* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Twist, angular_z_)
      + sizeof(Twist::angular_z_)
      - PROTOBUF_FIELD_OFFSET(Twist, linear_x_)>(
          reinterpret_cast<char*>(&linear_x_),
          reinterpret_cast<char*>(&other->linear_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Twist::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_5fmsgs_2eproto_getter, &descriptor_table_geometry_5fmsgs_2eproto_once,
      file_level_metadata_geometry_5fmsgs_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace geometry_msgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::geometry_msgs::Twist*
Arena::CreateMaybeMessage< ::geometry_msgs::Twist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::geometry_msgs::Twist >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

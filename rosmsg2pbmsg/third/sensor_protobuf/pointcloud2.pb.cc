// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pointcloud2.proto

#include "pointcloud2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pointcloud2 {
PROTOBUF_CONSTEXPR pointField_pb::pointField_pb(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , offset_(0)
  , datatype_(0)
  , count_(0){}
struct pointField_pbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR pointField_pbDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~pointField_pbDefaultTypeInternal() {}
  union {
    pointField_pb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 pointField_pbDefaultTypeInternal _pointField_pb_default_instance_;
PROTOBUF_CONSTEXPR point_pb::point_pb(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , reflectivity_(0)
  , tag_(0u)
  , line_(0u){}
struct point_pbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR point_pbDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~point_pbDefaultTypeInternal() {}
  union {
    point_pb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 point_pbDefaultTypeInternal _point_pb_default_instance_;
PROTOBUF_CONSTEXPR pointCloud2_pb::pointCloud2_pb(
    ::_pbi::ConstantInitialized)
  : fields_()
  , points_()
  , frame_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stamp_sec_(0)
  , stamp_nanosec_(0)
  , height_(0u)
  , width_(0u)
  , point_step_(0u)
  , row_step_(0u)
  , is_bigendian_(false)
  , is_dense_(false)
  , convert_time_(0)
  , send_time_(uint64_t{0u})
  , send_count_(0u){}
struct pointCloud2_pbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR pointCloud2_pbDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~pointCloud2_pbDefaultTypeInternal() {}
  union {
    pointCloud2_pb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 pointCloud2_pbDefaultTypeInternal _pointCloud2_pb_default_instance_;
}  // namespace pointcloud2
static ::_pb::Metadata file_level_metadata_pointcloud2_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_pointcloud2_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pointcloud2_2eproto = nullptr;

const uint32_t TableStruct_pointcloud2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointField_pb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointField_pb, name_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointField_pb, offset_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointField_pb, datatype_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointField_pb, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pointcloud2::point_pb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pointcloud2::point_pb, x_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::point_pb, y_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::point_pb, z_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::point_pb, reflectivity_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::point_pb, tag_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::point_pb, line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, stamp_sec_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, stamp_nanosec_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, frame_id_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, height_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, width_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, fields_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, is_bigendian_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, point_step_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, row_step_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, data_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, is_dense_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, send_time_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, convert_time_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, send_count_),
  PROTOBUF_FIELD_OFFSET(::pointcloud2::pointCloud2_pb, points_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pointcloud2::pointField_pb)},
  { 10, -1, -1, sizeof(::pointcloud2::point_pb)},
  { 22, -1, -1, sizeof(::pointcloud2::pointCloud2_pb)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pointcloud2::_pointField_pb_default_instance_._instance,
  &::pointcloud2::_point_pb_default_instance_._instance,
  &::pointcloud2::_pointCloud2_pb_default_instance_._instance,
};

const char descriptor_table_protodef_pointcloud2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021pointcloud2.proto\022\013pointcloud2\"N\n\rpoin"
  "tField_pb\022\014\n\004name\030\001 \001(\t\022\016\n\006offset\030\002 \001(\005\022"
  "\020\n\010datatype\030\003 \001(\005\022\r\n\005count\030\004 \001(\005\"\\\n\010poin"
  "t_pb\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\024\n"
  "\014reflectivity\030\004 \001(\002\022\013\n\003tag\030\005 \001(\r\022\014\n\004line"
  "\030\006 \001(\r\"\327\002\n\016pointCloud2_pb\022\021\n\tstamp_sec\030\001"
  " \001(\005\022\025\n\rstamp_nanosec\030\002 \001(\005\022\020\n\010frame_id\030"
  "\003 \001(\t\022\016\n\006height\030\004 \001(\r\022\r\n\005width\030\005 \001(\r\022*\n\006"
  "fields\030\006 \003(\0132\032.pointcloud2.pointField_pb"
  "\022\024\n\014is_bigendian\030\007 \001(\010\022\022\n\npoint_step\030\010 \001"
  "(\r\022\020\n\010row_step\030\t \001(\r\022\014\n\004data\030\n \001(\014\022\020\n\010is"
  "_dense\030\013 \001(\010\022\021\n\tsend_time\030\014 \001(\004\022\024\n\014conve"
  "rt_time\030\r \001(\002\022\022\n\nsend_count\030\016 \001(\r\022%\n\006poi"
  "nts\030\017 \003(\0132\025.pointcloud2.point_pbb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_pointcloud2_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pointcloud2_2eproto = {
    false, false, 560, descriptor_table_protodef_pointcloud2_2eproto,
    "pointcloud2.proto",
    &descriptor_table_pointcloud2_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_pointcloud2_2eproto::offsets,
    file_level_metadata_pointcloud2_2eproto, file_level_enum_descriptors_pointcloud2_2eproto,
    file_level_service_descriptors_pointcloud2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pointcloud2_2eproto_getter() {
  return &descriptor_table_pointcloud2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pointcloud2_2eproto(&descriptor_table_pointcloud2_2eproto);
namespace pointcloud2 {

// ===================================================================

class pointField_pb::_Internal {
 public:
};

pointField_pb::pointField_pb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pointcloud2.pointField_pb)
}
pointField_pb::pointField_pb(const pointField_pb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:pointcloud2.pointField_pb)
}

inline void pointField_pb::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(count_));
}

pointField_pb::~pointField_pb() {
  // @@protoc_insertion_point(destructor:pointcloud2.pointField_pb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void pointField_pb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void pointField_pb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pointField_pb::Clear() {
// @@protoc_insertion_point(message_clear_start:pointcloud2.pointField_pb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pointField_pb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pointcloud2.pointField_pb.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 datatype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pointField_pb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pointcloud2.pointField_pb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pointcloud2.pointField_pb.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_offset(), target);
  }

  // int32 datatype = 3;
  if (this->_internal_datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_datatype(), target);
  }

  // int32 count = 4;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pointcloud2.pointField_pb)
  return target;
}

size_t pointField_pb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pointcloud2.pointField_pb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  // int32 datatype = 3;
  if (this->_internal_datatype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datatype());
  }

  // int32 count = 4;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pointField_pb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pointField_pb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pointField_pb::GetClassData() const { return &_class_data_; }

void pointField_pb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<pointField_pb *>(to)->MergeFrom(
      static_cast<const pointField_pb &>(from));
}


void pointField_pb::MergeFrom(const pointField_pb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pointcloud2.pointField_pb)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_datatype() != 0) {
    _internal_set_datatype(from._internal_datatype());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pointField_pb::CopyFrom(const pointField_pb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pointcloud2.pointField_pb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pointField_pb::IsInitialized() const {
  return true;
}

void pointField_pb::InternalSwap(pointField_pb* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pointField_pb, count_)
      + sizeof(pointField_pb::count_)
      - PROTOBUF_FIELD_OFFSET(pointField_pb, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pointField_pb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pointcloud2_2eproto_getter, &descriptor_table_pointcloud2_2eproto_once,
      file_level_metadata_pointcloud2_2eproto[0]);
}

// ===================================================================

class point_pb::_Internal {
 public:
};

point_pb::point_pb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pointcloud2.point_pb)
}
point_pb::point_pb(const point_pb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_) -
    reinterpret_cast<char*>(&x_)) + sizeof(line_));
  // @@protoc_insertion_point(copy_constructor:pointcloud2.point_pb)
}

inline void point_pb::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&line_) -
    reinterpret_cast<char*>(&x_)) + sizeof(line_));
}

point_pb::~point_pb() {
  // @@protoc_insertion_point(destructor:pointcloud2.point_pb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void point_pb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void point_pb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void point_pb::Clear() {
// @@protoc_insertion_point(message_clear_start:pointcloud2.point_pb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_) -
      reinterpret_cast<char*>(&x_)) + sizeof(line_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* point_pb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float reflectivity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          reflectivity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 line = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* point_pb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pointcloud2.point_pb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float reflectivity = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reflectivity = this->_internal_reflectivity();
  uint32_t raw_reflectivity;
  memcpy(&raw_reflectivity, &tmp_reflectivity, sizeof(tmp_reflectivity));
  if (raw_reflectivity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_reflectivity(), target);
  }

  // uint32 tag = 5;
  if (this->_internal_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tag(), target);
  }

  // uint32 line = 6;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pointcloud2.point_pb)
  return target;
}

size_t point_pb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pointcloud2.point_pb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float reflectivity = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reflectivity = this->_internal_reflectivity();
  uint32_t raw_reflectivity;
  memcpy(&raw_reflectivity, &tmp_reflectivity, sizeof(tmp_reflectivity));
  if (raw_reflectivity != 0) {
    total_size += 1 + 4;
  }

  // uint32 tag = 5;
  if (this->_internal_tag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag());
  }

  // uint32 line = 6;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData point_pb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    point_pb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*point_pb::GetClassData() const { return &_class_data_; }

void point_pb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<point_pb *>(to)->MergeFrom(
      static_cast<const point_pb &>(from));
}


void point_pb::MergeFrom(const point_pb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pointcloud2.point_pb)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reflectivity = from._internal_reflectivity();
  uint32_t raw_reflectivity;
  memcpy(&raw_reflectivity, &tmp_reflectivity, sizeof(tmp_reflectivity));
  if (raw_reflectivity != 0) {
    _internal_set_reflectivity(from._internal_reflectivity());
  }
  if (from._internal_tag() != 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from._internal_line() != 0) {
    _internal_set_line(from._internal_line());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void point_pb::CopyFrom(const point_pb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pointcloud2.point_pb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool point_pb::IsInitialized() const {
  return true;
}

void point_pb::InternalSwap(point_pb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(point_pb, line_)
      + sizeof(point_pb::line_)
      - PROTOBUF_FIELD_OFFSET(point_pb, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata point_pb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pointcloud2_2eproto_getter, &descriptor_table_pointcloud2_2eproto_once,
      file_level_metadata_pointcloud2_2eproto[1]);
}

// ===================================================================

class pointCloud2_pb::_Internal {
 public:
};

pointCloud2_pb::pointCloud2_pb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fields_(arena),
  points_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pointcloud2.pointCloud2_pb)
}
pointCloud2_pb::pointCloud2_pb(const pointCloud2_pb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&stamp_sec_, &from.stamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_count_) -
    reinterpret_cast<char*>(&stamp_sec_)) + sizeof(send_count_));
  // @@protoc_insertion_point(copy_constructor:pointcloud2.pointCloud2_pb)
}

inline void pointCloud2_pb::SharedCtor() {
frame_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stamp_sec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&send_count_) -
    reinterpret_cast<char*>(&stamp_sec_)) + sizeof(send_count_));
}

pointCloud2_pb::~pointCloud2_pb() {
  // @@protoc_insertion_point(destructor:pointcloud2.pointCloud2_pb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void pointCloud2_pb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_id_.Destroy();
  data_.Destroy();
}

void pointCloud2_pb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pointCloud2_pb::Clear() {
// @@protoc_insertion_point(message_clear_start:pointcloud2.pointCloud2_pb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  points_.Clear();
  frame_id_.ClearToEmpty();
  data_.ClearToEmpty();
  ::memset(&stamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_count_) -
      reinterpret_cast<char*>(&stamp_sec_)) + sizeof(send_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pointCloud2_pb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 stamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          stamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stamp_nanosec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          stamp_nanosec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pointcloud2.pointCloud2_pb.frame_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pointcloud2.pointField_pb fields = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_bigendian = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          is_bigendian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 point_step = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          point_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 row_step = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          row_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_dense = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          is_dense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 send_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float convert_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          convert_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 send_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          send_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pointcloud2.point_pb points = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pointCloud2_pb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pointcloud2.pointCloud2_pb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stamp_sec = 1;
  if (this->_internal_stamp_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_stamp_sec(), target);
  }

  // int32 stamp_nanosec = 2;
  if (this->_internal_stamp_nanosec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stamp_nanosec(), target);
  }

  // string frame_id = 3;
  if (!this->_internal_frame_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pointcloud2.pointCloud2_pb.frame_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frame_id(), target);
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(), target);
  }

  // repeated .pointcloud2.pointField_pb fields = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_bigendian = 7;
  if (this->_internal_is_bigendian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_bigendian(), target);
  }

  // uint32 point_step = 8;
  if (this->_internal_point_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_point_step(), target);
  }

  // uint32 row_step = 9;
  if (this->_internal_row_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_row_step(), target);
  }

  // bytes data = 10;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_data(), target);
  }

  // bool is_dense = 11;
  if (this->_internal_is_dense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_dense(), target);
  }

  // uint64 send_time = 12;
  if (this->_internal_send_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_send_time(), target);
  }

  // float convert_time = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_convert_time = this->_internal_convert_time();
  uint32_t raw_convert_time;
  memcpy(&raw_convert_time, &tmp_convert_time, sizeof(tmp_convert_time));
  if (raw_convert_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_convert_time(), target);
  }

  // uint32 send_count = 14;
  if (this->_internal_send_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_send_count(), target);
  }

  // repeated .pointcloud2.point_pb points = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pointcloud2.pointCloud2_pb)
  return target;
}

size_t pointCloud2_pb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pointcloud2.pointCloud2_pb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pointcloud2.pointField_pb fields = 6;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pointcloud2.point_pb points = 15;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string frame_id = 3;
  if (!this->_internal_frame_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // bytes data = 10;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 stamp_sec = 1;
  if (this->_internal_stamp_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stamp_sec());
  }

  // int32 stamp_nanosec = 2;
  if (this->_internal_stamp_nanosec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stamp_nanosec());
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 point_step = 8;
  if (this->_internal_point_step() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_point_step());
  }

  // uint32 row_step = 9;
  if (this->_internal_row_step() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_step());
  }

  // bool is_bigendian = 7;
  if (this->_internal_is_bigendian() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dense = 11;
  if (this->_internal_is_dense() != 0) {
    total_size += 1 + 1;
  }

  // float convert_time = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_convert_time = this->_internal_convert_time();
  uint32_t raw_convert_time;
  memcpy(&raw_convert_time, &tmp_convert_time, sizeof(tmp_convert_time));
  if (raw_convert_time != 0) {
    total_size += 1 + 4;
  }

  // uint64 send_time = 12;
  if (this->_internal_send_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_send_time());
  }

  // uint32 send_count = 14;
  if (this->_internal_send_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_send_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pointCloud2_pb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pointCloud2_pb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pointCloud2_pb::GetClassData() const { return &_class_data_; }

void pointCloud2_pb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<pointCloud2_pb *>(to)->MergeFrom(
      static_cast<const pointCloud2_pb &>(from));
}


void pointCloud2_pb::MergeFrom(const pointCloud2_pb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pointcloud2.pointCloud2_pb)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  points_.MergeFrom(from.points_);
  if (!from._internal_frame_id().empty()) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_stamp_sec() != 0) {
    _internal_set_stamp_sec(from._internal_stamp_sec());
  }
  if (from._internal_stamp_nanosec() != 0) {
    _internal_set_stamp_nanosec(from._internal_stamp_nanosec());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_point_step() != 0) {
    _internal_set_point_step(from._internal_point_step());
  }
  if (from._internal_row_step() != 0) {
    _internal_set_row_step(from._internal_row_step());
  }
  if (from._internal_is_bigendian() != 0) {
    _internal_set_is_bigendian(from._internal_is_bigendian());
  }
  if (from._internal_is_dense() != 0) {
    _internal_set_is_dense(from._internal_is_dense());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_convert_time = from._internal_convert_time();
  uint32_t raw_convert_time;
  memcpy(&raw_convert_time, &tmp_convert_time, sizeof(tmp_convert_time));
  if (raw_convert_time != 0) {
    _internal_set_convert_time(from._internal_convert_time());
  }
  if (from._internal_send_time() != 0) {
    _internal_set_send_time(from._internal_send_time());
  }
  if (from._internal_send_count() != 0) {
    _internal_set_send_count(from._internal_send_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pointCloud2_pb::CopyFrom(const pointCloud2_pb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pointcloud2.pointCloud2_pb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pointCloud2_pb::IsInitialized() const {
  return true;
}

void pointCloud2_pb::InternalSwap(pointCloud2_pb* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame_id_, lhs_arena,
      &other->frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pointCloud2_pb, send_count_)
      + sizeof(pointCloud2_pb::send_count_)
      - PROTOBUF_FIELD_OFFSET(pointCloud2_pb, stamp_sec_)>(
          reinterpret_cast<char*>(&stamp_sec_),
          reinterpret_cast<char*>(&other->stamp_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pointCloud2_pb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pointcloud2_2eproto_getter, &descriptor_table_pointcloud2_2eproto_once,
      file_level_metadata_pointcloud2_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pointcloud2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pointcloud2::pointField_pb*
Arena::CreateMaybeMessage< ::pointcloud2::pointField_pb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pointcloud2::pointField_pb >(arena);
}
template<> PROTOBUF_NOINLINE ::pointcloud2::point_pb*
Arena::CreateMaybeMessage< ::pointcloud2::point_pb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pointcloud2::point_pb >(arena);
}
template<> PROTOBUF_NOINLINE ::pointcloud2::pointCloud2_pb*
Arena::CreateMaybeMessage< ::pointcloud2::pointCloud2_pb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pointcloud2::pointCloud2_pb >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

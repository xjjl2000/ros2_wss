// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laserscan.proto

#include "laserscan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace laserscan {
PROTOBUF_CONSTEXPR laserscanpb::laserscanpb(
    ::_pbi::ConstantInitialized)
  : ranges_()
  , intensities_()
  , header_(nullptr)
  , angle_min_(0)
  , angle_max_(0)
  , angle_increment_(0)
  , time_increment_(0)
  , scan_time_(0)
  , range_min_(0)
  , range_max_(0){}
struct laserscanpbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR laserscanpbDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~laserscanpbDefaultTypeInternal() {}
  union {
    laserscanpb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 laserscanpbDefaultTypeInternal _laserscanpb_default_instance_;
}  // namespace laserscan
static ::_pb::Metadata file_level_metadata_laserscan_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_laserscan_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_laserscan_2eproto = nullptr;

const uint32_t TableStruct_laserscan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::laserscan::laserscanpb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::laserscan::laserscanpb, header_),
  PROTOBUF_FIELD_OFFSET(::laserscan::laserscanpb, angle_min_),
  PROTOBUF_FIELD_OFFSET(::laserscan::laserscanpb, angle_max_),
  PROTOBUF_FIELD_OFFSET(::laserscan::laserscanpb, angle_increment_),
  PROTOBUF_FIELD_OFFSET(::laserscan::laserscanpb, time_increment_),
  PROTOBUF_FIELD_OFFSET(::laserscan::laserscanpb, scan_time_),
  PROTOBUF_FIELD_OFFSET(::laserscan::laserscanpb, range_min_),
  PROTOBUF_FIELD_OFFSET(::laserscan::laserscanpb, range_max_),
  PROTOBUF_FIELD_OFFSET(::laserscan::laserscanpb, ranges_),
  PROTOBUF_FIELD_OFFSET(::laserscan::laserscanpb, intensities_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::laserscan::laserscanpb)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::laserscan::_laserscanpb_default_instance_._instance,
};

const char descriptor_table_protodef_laserscan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017laserscan.proto\022\tlaserscan\032\023common_hea"
  "der.proto\"\342\001\n\013laserscanpb\022\036\n\006header\030\001 \001("
  "\0132\016.common.Header\022\021\n\tangle_min\030\002 \001(\002\022\021\n\t"
  "angle_max\030\003 \001(\002\022\027\n\017angle_increment\030\004 \001(\002"
  "\022\026\n\016time_increment\030\005 \001(\002\022\021\n\tscan_time\030\006 "
  "\001(\002\022\021\n\trange_min\030\007 \001(\002\022\021\n\trange_max\030\010 \001("
  "\002\022\016\n\006ranges\030\t \003(\002\022\023\n\013intensities\030\n \003(\002b\006"
  "proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_laserscan_2eproto_deps[1] = {
  &::descriptor_table_common_5fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_laserscan_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_laserscan_2eproto = {
    false, false, 286, descriptor_table_protodef_laserscan_2eproto,
    "laserscan.proto",
    &descriptor_table_laserscan_2eproto_once, descriptor_table_laserscan_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_laserscan_2eproto::offsets,
    file_level_metadata_laserscan_2eproto, file_level_enum_descriptors_laserscan_2eproto,
    file_level_service_descriptors_laserscan_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_laserscan_2eproto_getter() {
  return &descriptor_table_laserscan_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_laserscan_2eproto(&descriptor_table_laserscan_2eproto);
namespace laserscan {

// ===================================================================

class laserscanpb::_Internal {
 public:
  static const ::common::Header& header(const laserscanpb* msg);
};

const ::common::Header&
laserscanpb::_Internal::header(const laserscanpb* msg) {
  return *msg->header_;
}
void laserscanpb::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
laserscanpb::laserscanpb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ranges_(arena),
  intensities_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:laserscan.laserscanpb)
}
laserscanpb::laserscanpb(const laserscanpb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ranges_(from.ranges_),
      intensities_(from.intensities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&angle_min_, &from.angle_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_max_) -
    reinterpret_cast<char*>(&angle_min_)) + sizeof(range_max_));
  // @@protoc_insertion_point(copy_constructor:laserscan.laserscanpb)
}

inline void laserscanpb::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_max_) -
    reinterpret_cast<char*>(&header_)) + sizeof(range_max_));
}

laserscanpb::~laserscanpb() {
  // @@protoc_insertion_point(destructor:laserscan.laserscanpb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void laserscanpb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void laserscanpb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void laserscanpb::Clear() {
// @@protoc_insertion_point(message_clear_start:laserscan.laserscanpb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  intensities_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&angle_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_max_) -
      reinterpret_cast<char*>(&angle_min_)) + sizeof(range_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* laserscanpb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float angle_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          angle_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float angle_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          angle_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float angle_increment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          angle_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float time_increment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          time_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float scan_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          scan_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float range_min = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          range_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float range_max = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          range_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ranges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ranges(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 77) {
          _internal_add_ranges(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float intensities = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_intensities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 85) {
          _internal_add_intensities(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* laserscanpb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:laserscan.laserscanpb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // float angle_min = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_min = this->_internal_angle_min();
  uint32_t raw_angle_min;
  memcpy(&raw_angle_min, &tmp_angle_min, sizeof(tmp_angle_min));
  if (raw_angle_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_angle_min(), target);
  }

  // float angle_max = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_max = this->_internal_angle_max();
  uint32_t raw_angle_max;
  memcpy(&raw_angle_max, &tmp_angle_max, sizeof(tmp_angle_max));
  if (raw_angle_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_angle_max(), target);
  }

  // float angle_increment = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_increment = this->_internal_angle_increment();
  uint32_t raw_angle_increment;
  memcpy(&raw_angle_increment, &tmp_angle_increment, sizeof(tmp_angle_increment));
  if (raw_angle_increment != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_angle_increment(), target);
  }

  // float time_increment = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time_increment = this->_internal_time_increment();
  uint32_t raw_time_increment;
  memcpy(&raw_time_increment, &tmp_time_increment, sizeof(tmp_time_increment));
  if (raw_time_increment != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_time_increment(), target);
  }

  // float scan_time = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scan_time = this->_internal_scan_time();
  uint32_t raw_scan_time;
  memcpy(&raw_scan_time, &tmp_scan_time, sizeof(tmp_scan_time));
  if (raw_scan_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_scan_time(), target);
  }

  // float range_min = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range_min = this->_internal_range_min();
  uint32_t raw_range_min;
  memcpy(&raw_range_min, &tmp_range_min, sizeof(tmp_range_min));
  if (raw_range_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_range_min(), target);
  }

  // float range_max = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range_max = this->_internal_range_max();
  uint32_t raw_range_max;
  memcpy(&raw_range_max, &tmp_range_max, sizeof(tmp_range_max));
  if (raw_range_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_range_max(), target);
  }

  // repeated float ranges = 9;
  if (this->_internal_ranges_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_ranges(), target);
  }

  // repeated float intensities = 10;
  if (this->_internal_intensities_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_intensities(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:laserscan.laserscanpb)
  return target;
}

size_t laserscanpb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:laserscan.laserscanpb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float ranges = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ranges_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float intensities = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intensities_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .common.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // float angle_min = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_min = this->_internal_angle_min();
  uint32_t raw_angle_min;
  memcpy(&raw_angle_min, &tmp_angle_min, sizeof(tmp_angle_min));
  if (raw_angle_min != 0) {
    total_size += 1 + 4;
  }

  // float angle_max = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_max = this->_internal_angle_max();
  uint32_t raw_angle_max;
  memcpy(&raw_angle_max, &tmp_angle_max, sizeof(tmp_angle_max));
  if (raw_angle_max != 0) {
    total_size += 1 + 4;
  }

  // float angle_increment = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_increment = this->_internal_angle_increment();
  uint32_t raw_angle_increment;
  memcpy(&raw_angle_increment, &tmp_angle_increment, sizeof(tmp_angle_increment));
  if (raw_angle_increment != 0) {
    total_size += 1 + 4;
  }

  // float time_increment = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time_increment = this->_internal_time_increment();
  uint32_t raw_time_increment;
  memcpy(&raw_time_increment, &tmp_time_increment, sizeof(tmp_time_increment));
  if (raw_time_increment != 0) {
    total_size += 1 + 4;
  }

  // float scan_time = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scan_time = this->_internal_scan_time();
  uint32_t raw_scan_time;
  memcpy(&raw_scan_time, &tmp_scan_time, sizeof(tmp_scan_time));
  if (raw_scan_time != 0) {
    total_size += 1 + 4;
  }

  // float range_min = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range_min = this->_internal_range_min();
  uint32_t raw_range_min;
  memcpy(&raw_range_min, &tmp_range_min, sizeof(tmp_range_min));
  if (raw_range_min != 0) {
    total_size += 1 + 4;
  }

  // float range_max = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range_max = this->_internal_range_max();
  uint32_t raw_range_max;
  memcpy(&raw_range_max, &tmp_range_max, sizeof(tmp_range_max));
  if (raw_range_max != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData laserscanpb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    laserscanpb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*laserscanpb::GetClassData() const { return &_class_data_; }

void laserscanpb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<laserscanpb *>(to)->MergeFrom(
      static_cast<const laserscanpb &>(from));
}


void laserscanpb::MergeFrom(const laserscanpb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:laserscan.laserscanpb)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  intensities_.MergeFrom(from.intensities_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::common::Header::MergeFrom(from._internal_header());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_min = from._internal_angle_min();
  uint32_t raw_angle_min;
  memcpy(&raw_angle_min, &tmp_angle_min, sizeof(tmp_angle_min));
  if (raw_angle_min != 0) {
    _internal_set_angle_min(from._internal_angle_min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_max = from._internal_angle_max();
  uint32_t raw_angle_max;
  memcpy(&raw_angle_max, &tmp_angle_max, sizeof(tmp_angle_max));
  if (raw_angle_max != 0) {
    _internal_set_angle_max(from._internal_angle_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_increment = from._internal_angle_increment();
  uint32_t raw_angle_increment;
  memcpy(&raw_angle_increment, &tmp_angle_increment, sizeof(tmp_angle_increment));
  if (raw_angle_increment != 0) {
    _internal_set_angle_increment(from._internal_angle_increment());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time_increment = from._internal_time_increment();
  uint32_t raw_time_increment;
  memcpy(&raw_time_increment, &tmp_time_increment, sizeof(tmp_time_increment));
  if (raw_time_increment != 0) {
    _internal_set_time_increment(from._internal_time_increment());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scan_time = from._internal_scan_time();
  uint32_t raw_scan_time;
  memcpy(&raw_scan_time, &tmp_scan_time, sizeof(tmp_scan_time));
  if (raw_scan_time != 0) {
    _internal_set_scan_time(from._internal_scan_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range_min = from._internal_range_min();
  uint32_t raw_range_min;
  memcpy(&raw_range_min, &tmp_range_min, sizeof(tmp_range_min));
  if (raw_range_min != 0) {
    _internal_set_range_min(from._internal_range_min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range_max = from._internal_range_max();
  uint32_t raw_range_max;
  memcpy(&raw_range_max, &tmp_range_max, sizeof(tmp_range_max));
  if (raw_range_max != 0) {
    _internal_set_range_max(from._internal_range_max());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void laserscanpb::CopyFrom(const laserscanpb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:laserscan.laserscanpb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool laserscanpb::IsInitialized() const {
  return true;
}

void laserscanpb::InternalSwap(laserscanpb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ranges_.InternalSwap(&other->ranges_);
  intensities_.InternalSwap(&other->intensities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(laserscanpb, range_max_)
      + sizeof(laserscanpb::range_max_)
      - PROTOBUF_FIELD_OFFSET(laserscanpb, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata laserscanpb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_laserscan_2eproto_getter, &descriptor_table_laserscan_2eproto_once,
      file_level_metadata_laserscan_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace laserscan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::laserscan::laserscanpb*
Arena::CreateMaybeMessage< ::laserscan::laserscanpb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::laserscan::laserscanpb >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

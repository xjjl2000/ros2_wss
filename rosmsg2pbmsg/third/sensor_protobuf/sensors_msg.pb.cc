// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors_msg.proto

#include "sensors_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sensors_msg {
PROTOBUF_CONSTEXPR ImageProto::ImageProto(
    ::_pbi::ConstantInitialized)
  : header_frame_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , format_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_stamp_sec_(0)
  , header_stamp_nanosec_(0)
  , height_(0u)
  , width_(0u)
  , step_(0u){}
struct ImageProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageProtoDefaultTypeInternal() {}
  union {
    ImageProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageProtoDefaultTypeInternal _ImageProto_default_instance_;
}  // namespace sensors_msg
static ::_pb::Metadata file_level_metadata_sensors_5fmsg_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sensors_5fmsg_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sensors_5fmsg_2eproto = nullptr;

const uint32_t TableStruct_sensors_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors_msg::ImageProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors_msg::ImageProto, header_stamp_sec_),
  PROTOBUF_FIELD_OFFSET(::sensors_msg::ImageProto, header_stamp_nanosec_),
  PROTOBUF_FIELD_OFFSET(::sensors_msg::ImageProto, header_frame_id_),
  PROTOBUF_FIELD_OFFSET(::sensors_msg::ImageProto, height_),
  PROTOBUF_FIELD_OFFSET(::sensors_msg::ImageProto, width_),
  PROTOBUF_FIELD_OFFSET(::sensors_msg::ImageProto, step_),
  PROTOBUF_FIELD_OFFSET(::sensors_msg::ImageProto, format_),
  PROTOBUF_FIELD_OFFSET(::sensors_msg::ImageProto, data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sensors_msg::ImageProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sensors_msg::_ImageProto_default_instance_._instance,
};

const char descriptor_table_protodef_sensors_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021sensors_msg.proto\022\013sensors_msg\"\250\001\n\nIma"
  "geProto\022\030\n\020header_stamp_sec\030\001 \001(\005\022\034\n\024hea"
  "der_stamp_nanosec\030\002 \001(\005\022\027\n\017header_frame_"
  "id\030\003 \001(\t\022\016\n\006height\030\004 \001(\r\022\r\n\005width\030\005 \001(\r\022"
  "\014\n\004step\030\006 \001(\r\022\016\n\006format\030\007 \001(\t\022\014\n\004data\030\010 "
  "\001(\014b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_sensors_5fmsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensors_5fmsg_2eproto = {
    false, false, 211, descriptor_table_protodef_sensors_5fmsg_2eproto,
    "sensors_msg.proto",
    &descriptor_table_sensors_5fmsg_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_sensors_5fmsg_2eproto::offsets,
    file_level_metadata_sensors_5fmsg_2eproto, file_level_enum_descriptors_sensors_5fmsg_2eproto,
    file_level_service_descriptors_sensors_5fmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensors_5fmsg_2eproto_getter() {
  return &descriptor_table_sensors_5fmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensors_5fmsg_2eproto(&descriptor_table_sensors_5fmsg_2eproto);
namespace sensors_msg {

// ===================================================================

class ImageProto::_Internal {
 public:
};

ImageProto::ImageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sensors_msg.ImageProto)
}
ImageProto::ImageProto(const ImageProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header_frame_id().empty()) {
    header_frame_id_.Set(from._internal_header_frame_id(), 
      GetArenaForAllocation());
  }
  format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    format_.Set(from._internal_format(), 
      GetArenaForAllocation());
  }
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&header_stamp_sec_, &from.header_stamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&header_stamp_sec_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:sensors_msg.ImageProto)
}

inline void ImageProto::SharedCtor() {
header_frame_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_frame_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
format_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  format_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_stamp_sec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&header_stamp_sec_)) + sizeof(step_));
}

ImageProto::~ImageProto() {
  // @@protoc_insertion_point(destructor:sensors_msg.ImageProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  header_frame_id_.Destroy();
  format_.Destroy();
  data_.Destroy();
}

void ImageProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors_msg.ImageProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_frame_id_.ClearToEmpty();
  format_.ClearToEmpty();
  data_.ClearToEmpty();
  ::memset(&header_stamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&header_stamp_sec_)) + sizeof(step_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 header_stamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          header_stamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 header_stamp_nanosec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          header_stamp_nanosec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string header_frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_header_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sensors_msg.ImageProto.header_frame_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 step = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string format = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sensors_msg.ImageProto.format"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors_msg.ImageProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 header_stamp_sec = 1;
  if (this->_internal_header_stamp_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_header_stamp_sec(), target);
  }

  // int32 header_stamp_nanosec = 2;
  if (this->_internal_header_stamp_nanosec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_header_stamp_nanosec(), target);
  }

  // string header_frame_id = 3;
  if (!this->_internal_header_frame_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_frame_id().data(), static_cast<int>(this->_internal_header_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors_msg.ImageProto.header_frame_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_header_frame_id(), target);
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(), target);
  }

  // uint32 step = 6;
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_step(), target);
  }

  // string format = 7;
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors_msg.ImageProto.format");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_format(), target);
  }

  // bytes data = 8;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors_msg.ImageProto)
  return target;
}

size_t ImageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors_msg.ImageProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string header_frame_id = 3;
  if (!this->_internal_header_frame_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_frame_id());
  }

  // string format = 7;
  if (!this->_internal_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // bytes data = 8;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 header_stamp_sec = 1;
  if (this->_internal_header_stamp_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_header_stamp_sec());
  }

  // int32 header_stamp_nanosec = 2;
  if (this->_internal_header_stamp_nanosec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_header_stamp_nanosec());
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 width = 5;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 step = 6;
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_step());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageProto::GetClassData() const { return &_class_data_; }

void ImageProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageProto *>(to)->MergeFrom(
      static_cast<const ImageProto &>(from));
}


void ImageProto::MergeFrom(const ImageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors_msg.ImageProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_header_frame_id().empty()) {
    _internal_set_header_frame_id(from._internal_header_frame_id());
  }
  if (!from._internal_format().empty()) {
    _internal_set_format(from._internal_format());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_header_stamp_sec() != 0) {
    _internal_set_header_stamp_sec(from._internal_header_stamp_sec());
  }
  if (from._internal_header_stamp_nanosec() != 0) {
    _internal_set_header_stamp_nanosec(from._internal_header_stamp_nanosec());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_step() != 0) {
    _internal_set_step(from._internal_step());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageProto::CopyFrom(const ImageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors_msg.ImageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProto::IsInitialized() const {
  return true;
}

void ImageProto::InternalSwap(ImageProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &header_frame_id_, lhs_arena,
      &other->header_frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &format_, lhs_arena,
      &other->format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageProto, step_)
      + sizeof(ImageProto::step_)
      - PROTOBUF_FIELD_OFFSET(ImageProto, header_stamp_sec_)>(
          reinterpret_cast<char*>(&header_stamp_sec_),
          reinterpret_cast<char*>(&other->header_stamp_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensors_5fmsg_2eproto_getter, &descriptor_table_sensors_5fmsg_2eproto_once,
      file_level_metadata_sensors_5fmsg_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sensors_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensors_msg::ImageProto*
Arena::CreateMaybeMessage< ::sensors_msg::ImageProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors_msg::ImageProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
